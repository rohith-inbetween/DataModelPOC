
	apply plugin: 'java'
	group = 'com.cs'
	version = '1.0'
	apply plugin : 'idea'
	apply plugin : 'eclipse'
	apply plugin : 'jetty'
	httpPort = 8090
	apply plugin : 'war'
	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	def encoding = {it.encoding = 'UTF-8'}
	
	test{
		exclude 'com/cs/test/**'
	}
	

	repositories {
		mavenCentral ()
		maven { url "http://m2.neo4j.org/content/repositories/releases" }
		maven { url "http://repo.spring.io/libs-milestone" }
		
	}
	dependencies {

		def springVersion = "4.0.0.RELEASE"
//		def tomcat7Version = "7.0.6"
		compile "org.springframework:spring-core:${springVersion}"
		compile "org.springframework:spring-web:${springVersion}"
		compile "org.springframework:spring-webmvc:${springVersion}"
		compile "org.springframework:spring-beans:${springVersion}"
		compile "org.springframework:spring-context:${springVersion}"
		compile "org.springframework:spring-tx:${springVersion}"
		compile 'org.codehaus.jackson:jackson-core-asl:1.9.9'
		compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.9'
//		compile "org.apache.tomcat:tomcat-servlet-api:${tomcat7Version}"
		compile 'com.googlecode.json-simple:json-simple:1.1.1'
		compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.0.0.RC1'
		compile 'cglib:cglib:2.2.2'
		compile 'org.springframework.boot:spring-boot-starter-test:1.0.0.RC1'
		compile 'com.h2database:h2:1.3.175'
		compile 'commons-dbcp:commons-dbcp:1.2.2'
		compile 'junit:junit:4.11'
		compile 'com.google.code.gson:gson:2.2.4'
		compile 'org.springframework.data:spring-data-neo4j:3.0.1.RELEASE'
		compile 'org.springframework:spring-test:${springVersion}'
		compile 'org.springframework:spring-aop:${springVersion}'
		compile 'org.springframework:spring-aspects:${springVersion}'
		compile 'org.hibernate:hibernate-entitymanager:4.3.0.Final'
		compile 'org.hibernate:hibernate-validator:4.2.0.Final'
		//compile 'javax.validation:validation-api:1.1.0.Final'
		compile 'org.hibernate:hibernate-search:4.5.0.Final'
		compile 'org.hibernate:hibernate-core:4.3.4.Final'
		compile 'com.mysema.querydsl:querydsl-apt:3.3.2'
		compile 'com.mysema.querydsl:querydsl-jpa:3.3.2'
		compile 'com.mysema.querydsl:querydsl-lucene:3.1.1'
		compile 'org.apache.lucene:lucene-queries:2.3.0'
		compile 'com.mysema.querydsl:querydsl-hibernate-search:3.3.2'
		
		compile fileTree(dir: 'resources/', include: '*.jar')
	}
	
	sourceSets {
    generated {
        java {
            srcDirs = ['src/main/generated']
        }
    }
}

configurations {
    querydslapt
}


task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}

idea {
    module {
        sourceDirs += file('src/main/generated')
    }
}

jettyRun {
  jettyConfig = file('jett.xml')
}


task wrapper(type: Wrapper) {
    gradleVersion = '1.5'
}

